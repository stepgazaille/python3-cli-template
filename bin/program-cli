"""
program -- program description

@author:     John Doe
@copyright:  2016 - All rights reserved.
@license:    Apache License 2.0
@contact:    author@domain.com
@deffield    updated: Updated
"""

import sys
import os

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter
from program import program

__all__ = []
__version__ = 0.1
__date__ = '2016-09-03'
__updated__ = '2016-09-20'


class CLIError(Exception):
    """Generic exception to raise and log different fatal errors."""
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg

    def __str__(self):
        return self.msg

    def __unicode__(self):
        return self.msg


def main(argv=None):
    """Command line options."""

    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (program_version,
                                                     program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = """%s

  Created by Stephane Gazaille on %s.
  Copyright 2016. All rights reserved.

  Licensed under the Apache License 2.0
  http://www.apache.org/licenses/LICENSE-2.0

  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
""" % (program_shortdesc, str(__date__))
    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license,
                                formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument("mandatory", help="A mandatory argument.")
        parser.add_argument("-o", "--optional", help="an optional argument")

        # Process arguments
        args = parser.parse_args()

        mandatory = args.mandatory
        optional = args.optional


    except KeyboardInterrupt:
        print()
        return 0
    except Exception as exception:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(exception) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

    print("This is th mandatory argument:", mandatory)

    if optional:
        print("This is the optional argmuent:", optional)

    program1 = program.Program(mandatory)

if __name__ == "__main__":
    sys.exit(main())
